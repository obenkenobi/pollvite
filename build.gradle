plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.8.21' apply false
    id 'org.springframework.boot' version '3.1.0' apply false
    id 'io.spring.dependency-management' version '1.1.0' apply false
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.21' apply false

    id 'idea'
    id 'java'
}

enum Category { GRPC, JUNIT, KOTLIN, LIBRARY, SPRING_BOOT }

ext {
    getScriptPath = { "${rootProject.projectDir}/gradleScripts/${it}" }
}

subprojects {
    if (!project.hasProperty('categories')) {
        return
    }
    Set<String> catSet = Set.of((project.categories as String).split(','))
    def isCategory = {Category cat -> catSet.contains(cat.name()) }

    def isLibrary = isCategory(Category.LIBRARY)

    def jvmCategories = [
            Category.GRPC,
            Category.SPRING_BOOT,
            Category.KOTLIN,
            Category.JUNIT
    ]

    def isJvmProject = jvmCategories.stream().anyMatch(isCategory)

    if (isJvmProject) {
        apply plugin: 'java'
        apply from: getScriptPath('dependencies.gradle')

        def usingSpringBoot = isCategory(Category.SPRING_BOOT)
        def usingKotlin = isCategory(Category.KOTLIN)
        def usingJunit = isCategory(Category.JUNIT)

        sourceCompatibility = parent.properties.javaVersion

        compileJava {
            options.release = Integer.parseInt(parent.properties.javaVersion)
        }

        if(isLibrary) {
            apply plugin: 'java-library'
        }

        if (usingKotlin) {
            apply plugin: 'org.jetbrains.kotlin.jvm';

            tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
                kotlinOptions {
                    freeCompilerArgs = ['-Xjsr305=strict']
                    jvmTarget = parent.properties.javaVersion
                }
            }
        }

        repositories {
            mavenCentral()
        }

        if (usingJunit) {
            test {
                useJUnitPlatform()
            }
        }

        configurations {
            compileOnly {
                extendsFrom annotationProcessor
            }
        }

        if (usingSpringBoot) {
            apply plugin: 'org.springframework.boot'
            apply plugin: 'io.spring.dependency-management'

            if (isLibrary) {
                bootJar {
                    enabled = false
                }
            }

            if (usingKotlin) {
                apply plugin: 'org.jetbrains.kotlin.plugin.spring'
            }

            ext {
                set('springCloudVersion', "2022.0.2")
            }

            dependencyManagement {
                imports {
                    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
                }
            }
        }
    }
}



